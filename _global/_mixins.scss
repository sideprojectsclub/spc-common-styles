//--------//
// Mixins //
//--------//

@mixin animation($animation) {
    -webkit-animation: $animation;
    -moz-animation: $animation;
    animation: $animation;
}

@mixin box-shadow($shadow...) {
    -webkit-box-shadow: $shadow;
    -moz-box-shadow:    $shadow;
    box-shadow:         $shadow;
}

// usage: @include breakpoint(480px) { your styles here }
@mixin breakpoint($point) {
    @media all and (min-width: $point) {
        @content;
    }
}

@mixin breakpoint-max-height($point) {
    @media all and (max-height: $point) {
        @content;
    }
}

%clearfix {
    &:after {
        clear: both;
        display: table;
        content: " ";
    }
}

%default-border-radius {
    border-radius: 3px;
}

@mixin filter($filter) {
    -webkit-filter: $filter;
    filter: $filter;
}

@mixin keyframes($animation_name) {
    @-webkit-keyframes #{$animation_name} {
        @content;
    }

    @-moz-keyframes #{$animation_name} {
        @content;
    }

    @keyframes #{$animation_name} {
        @content;
    }
}

%page-max-width {
    max-width: $max-width;
    margin: 0 auto;
}

@mixin transform($property) {
    -webkit-transform: $property;
    -moz-transform: $property;
    -ms-transform: $property;
    transform: $property;
}

@mixin transition($property...) {
    -webkit-transition: $property;
    transition: $property;
}

%vertical-center-fix {
    @include transform(translate(0, -50%)  translateZ(0));
    position: relative;
    top: 50%;
}

// Unit converters

@function px($value) {
    @if (unit($value) == 'rem') {
        @return #{($value / 1rem * 10)}px;
    } @else {
        @return #{$value}px;
    }
}

@function rem($value) {
    @if (unit($value) == 'px') {
        @return #{($value / 10px)}rem;
    } @else {
        @return #{$value}rem;
    }
}

// Flexbox

@function old-flex-syntax($value) {
    @if $value == 'flex-start' {
        @return start;
    } @else if $value == 'flex-end' {
        @return end;
    } @else if $value == 'space-between' {
        @return justify;
    } @else if $value == 'space-around' {
        @return distribute;
    } @else {
        @return $value;
    }
}

@mixin align-content($align) {
    -webkit-align-content: $align;
    -ms-flex-line-pack: old-flex-syntax($align);
    align-content: $align;
}

@mixin align-items($align) {
    -webkit-box-align: old-flex-syntax($align);
    -webkit-align-items: $align;
    -ms-flex-align: old-flex-syntax($align);
    align-items: $align;
}

@mixin align-self($align) {
    -webkit-align-self: $align;
    -ms-flex-item-align: old-flex-syntax($align);
    align-self: $align;
}

@mixin display-flex {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}

@mixin flex($flex) {
    -webkit-flex: $flex;
    -ms-flex: $flex;
    flex: $flex;
}

@mixin flex-basis($basis) {
    -webkit-flex-basis: $basis;
    -ms-flex-preferred-size: $basis;
    flex-basis: $basis;
}

@mixin flex-direction($direction) {
    @if $direction == 'row' {
        -webkit-box-orient: horizontal;
    } @else {
        -webkit-box-orient: vertical;
    }
    
    -webkit-box-direction: normal;
    -webkit-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
}

@mixin flex-flow($flow) {
    -webkit-flex-flow: $flow;
    -ms-flex-flow: $flow;
    flex-flow: $flow;
}

@mixin flex-grow($grow) {
    -webkit-box-flex: $grow;
    -webkit-flex-grow: $grow;
    -ms-flex-positive: $grow;
    flex-grow: $grow;
}

@mixin flex-shrink($shrink) {
    -webkit-flex-shrink: $shrink;
    -ms-flex-negative: $shrink;
    flex-shrink: $shrink;
}

@mixin flex-wrap($wrap) {
    -webkit-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}

@mixin justify-content($justify) {
    -webkit-box-pack: old-flex-syntax($justify);
    -webkit-justify-content: $justify;
    -ms-flex-pack: old-flex-syntax($justify);
    justify-content: $justify;
}

@mixin order($order) {
    -webkit-box-ordinal-group: $order + 1;
    -webkit-order: $order;
    -ms-flex-order: $order;
    order: $order;
}